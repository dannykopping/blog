<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>benchmarks on Danny Kopping</title><link>https://blog.infomaniac.co.za/tags/benchmarks/</link><description>Recent content in benchmarks on Danny Kopping</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Â© Danny Kopping</copyright><lastBuildDate>Thu, 09 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.infomaniac.co.za/tags/benchmarks/index.xml" rel="self" type="application/rss+xml"/><item><title>Golang quickie: benchmark output</title><link>https://blog.infomaniac.co.za/posts/go-benchmarks/</link><pubDate>Thu, 09 Jun 2022 00:00:00 +0000</pubDate><guid>https://blog.infomaniac.co.za/posts/go-benchmarks/</guid><description>Benchmarks in Go Go provides a convenient way for writing &amp;amp; running benchmarks, but by default doesn&amp;rsquo;t show you much useful info.
Here&amp;rsquo;s an example:
package main import ( &amp;#34;math/rand&amp;#34; &amp;#34;testing&amp;#34; ) var letters = []rune(&amp;#34;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&amp;#34;) func randSeq(n int) string { b := make([]rune, n) for i := range b { b[i] = letters[rand.Intn(len(letters))] } return string(b) } func BenchmarkRandInt(b *testing.B) { for i := 0; i &amp;lt; b.N; i++ { randSeq(i) } } Here&amp;rsquo;s the output:</description></item></channel></rss>